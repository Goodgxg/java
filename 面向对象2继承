面向对象三大特性：封装，继承，多态

封装

某些属性，若直接被其他类访问，其属性值可能不安全。 private
setter,getter

继承

继承的基本概念和语法

父类->子类 基类->派生类

子类可以访问除了private访问的成员
java是单继承语言，一个类只能有一个父类，父类可以有多个子类。
二义性
子类在继承到父类成员的同时，还可以拥有自己特有的属性和方法。
何时用类？拥有相同的属性方法，当拥有的方法不满足自己，继承然后增加新的方法，实现对父类功能的拓展。
继承特点

继承中的构造方法

一个对象在实例化的时候，会优先实例化从父类继承到的属性，然后在实例化自己类中的属性。默认调用父类中的无参构造方法。 在继承中，构造方法需注意：如果父类没有无参构造方法，子类无法实例化。

解决方法：1.在父类添加一个无参构造方法。2.在子类的构造方法中，显示的调用父类有参构造方法。

关键字this

super是对父类对象的引用

在构造方法中，调用父类的构造方法

在非静态方法中，调用父类的方法

访问权限修饰符

访问权限修饰符：public ,protected,private
访问权限：公共权限，保护权限，包权限，私有权限
类的访问权限只要public和package;本类本包内访问，其他类不能访问。
虽然public修饰的类可以在当前项目的任意位置访问，但是在不同的包中，需导包。
方法的重写

子类对父类的方法进行重新实现
方法名与父类一样
子类中的访问权限要大于等于父类的访问权限 public》protected》package/default》private
返回值要求。子类中的方法返回值类型需要和父类的返回值类型一致或者是其子类。
关于异常抛出：
@override 是一个注解，可以使用@Override是一个重写的校验，写在重写的方法之前，来判断是否是父类的重写。只针对一个方法有效。

@override在重写中不是必须的，加上更好。

final关键字

final表示最终的，可以用来修饰变量，修饰类，修饰方法
final修饰变量：表示这个变量的值不允许改变，是一个常量
final修饰类：表示这个类是一个最终类，无法被继承
final修饰方法：表示这个方法是一个最终方法。
object类

toString（）返回一个对象的字符串表现形式。
hashCode（）地址的映射值。返回一个对象地址的hashcode基本没用，如果无关哈希表结构，则这个方法很重要
getclass（）获取类型，这个类型描述信息包含了这个类的各种信息描述。
equals（）可以自定义规则，来比较两个对象，在定制规则的时候：如果obj是null，结果为false 如果this==obj，结果为true
如果this和obj的类型不同，结果一定为false 如果a.eauale(b)为true这b.equals(a )也为true

