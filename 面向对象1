面向对象

面向对象简介

面向对象：是一个看待问题，解决问题的思维方式。找到能够帮助解决问题的实体，然后委托这个实体去解决这个问题。
面向过程：是一个看待问题，解决问题的思维方式。问题是如何一步步解决，亲力亲为的去解决这个问题。
面向对象基于面向过程。
注意事项：java是一个面向对象的语言（我们可以使用java更加方便的写出具有面向对象编程思想的程序）

类的设计与对象的实例化

对象：能够帮助解决问题的实体
类：由若干个具有相同的特征和行为的实体组成的集合。
类和对象之间的关系

对象是类的实体
类是对象的集合。
在程序设计的时候，先有类，后有对象

类的设计
关键字: class
类名: 是标识符，遵循大驼峰命名法

成员访问

static修饰的属性和方法为静态属性和静态方法。

static的属性，不是在对象创建时开辟的空间，也没有在堆中开辟空间。
静态属性是在常量池（包含在方法内）中开辟的空间，静态属性空间开辟是发生在类第一次被加载到内存的时候。
当第一次使用这个类的时候（实例化对象，调用静态方法）
非静态的属性：
非静态的属性在堆内开辟空间
非静态属性空间开辟是发生在对象实例化的时候。
静态修饰是属于类的。
静态的属性和方法要用类来访问
非静态的属性需要对象来访问。
静态方法属性访问 类.静态成员
类不能访问非静态的成员。
静态成员用类访问，非静态成员用对象访问。

在静态方法中不能直接访问非静态成员（对象可在非静态方法中调用静态方法）
在非静态方法中可以直接访问静态成员和非静态成员
如果需要不同的对象属性值不一样，则需要将属性设计为非静态的，逻辑上，非静态成员属于对象。
设置与对象无关的设置为静态。
（设计工具类要用静态）
this关键字

this：

用在非静态的方法中，不能用在静态方法中。
代表对当前对象的引用：
当前对象：谁调用方法，this指的就是谁。

成员访问：类中的每一个成员，在访问的时候必须有一个访问的主体，这个主体在某些情况下可以省略。

在静态方法中：可以直接访问静态成员，被省略的部分是当前类。
在非静态方法中：可以直接访问静态成员和非静态成员，访问非静态成员时，调用主体this可以被省略，访问静态成员时，调用主体当前类可以省略
不能使用：方法中有和属性同名的参数，为了区分属性和参数，不能省略this。
**如果无法区分是否可以省略，可以不省略，如果省略后对程序没有任何歧义。
构造方法

构造方法定义，调用

定义：和普通方法定义的的区别

构造方法无返回类型
方法名和类名一定相同。
不能有其他修饰符
如果一个类中没哟定义构造方法，系统会自动的添加一个public权限的无参构造方法
如果一个类中定义了 ，则系统不再提供构造方法。
对象执行的第一个方法为构造方法开始
语法：
[访问权限修饰符] 类名([参数列表。内部]) 构造方法的重载

构造方法调用其他的构造方法

在实例化的时候用new调用

在构造方法中，用this来调用

不要循环调用

析构方法

析构和构造是对应的，析构执行时机：当这个对象被销毁之前（做资源释放）
代码段
